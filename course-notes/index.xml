<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course-notes on Blog Isaac Verminck</title>
    <link>https://isaacverm.github.io/course-notes/</link>
    <description>Recent content in Course-notes on Blog Isaac Verminck</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Sep 2019 21:48:04 +0200</lastBuildDate>
    
	<atom:link href="https://isaacverm.github.io/course-notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Abstractions With Procedures</title>
      <link>https://isaacverm.github.io/course-notes/building-abstractions-with-procedures/</link>
      <pubDate>Wed, 25 Sep 2019 21:48:04 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/course-notes/building-abstractions-with-procedures/</guid>
      <description>process  manipulates data directed by rules (program)  interpreter carries out processes
why study Lisp blurs distinction between procedures and data</description>
    </item>
    
    <item>
      <title>Elements of Programming</title>
      <link>https://isaacverm.github.io/course-notes/elements-of-programming/</link>
      <pubDate>Wed, 25 Sep 2019 21:40:27 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/course-notes/elements-of-programming/</guid>
      <description>elements in every language  primitive expressions combination abstraction  primitive expressions  most basic entities either  primitive procedures (e.g. +) primitive data (number)   combination build compound elements from simpler elements
abstraction compound elements can be named and manipulated as units
types of elements  procedures data  benefit prefix notation  arbitrary number of arguments nesting  repl read-evaluate-print-loop
define in scheme variables have values</description>
    </item>
    
  </channel>
</rss>