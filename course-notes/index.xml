<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course-notes on Blog Isaac Verminck</title>
    <link>https://isaacverm.github.io/course-notes/</link>
    <description>Recent content in Course-notes on Blog Isaac Verminck</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Oct 2019 16:08:12 +0200</lastBuildDate>
    
	<atom:link href="https://isaacverm.github.io/course-notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tips and Tricks</title>
      <link>https://isaacverm.github.io/course-notes/tips-and-tricks/</link>
      <pubDate>Thu, 03 Oct 2019 16:08:12 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/course-notes/tips-and-tricks/</guid>
      <description>Debugging If you use R5RS as language, you can use the trace function to see the call stack.
E.g.
(#%require racket/trace) (define (sum-integers a b) (if (&amp;gt; a b) 0 (+ a (sum-integers (+ a 1) b)))) (trace sum-integers) (sum-integers 1 5)  Don&amp;rsquo;t forget to specify the require because [trace] is not included in R5D5 by default.</description>
    </item>
    
    <item>
      <title>Higher Order Procedures</title>
      <link>https://isaacverm.github.io/course-notes/higher-order-procedures-definitions/</link>
      <pubDate>Thu, 03 Oct 2019 15:28:01 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/course-notes/higher-order-procedures-definitions/</guid>
      <description>List higher order procedure
goal higher order procedure
higher order procedure template
higher order procedure sum template
anonymous procedure
what define does more than anonymous procedure
local variables can be created in multiple ways
Explanation Higher order procedure procedure manipulating another procedure
Goal higher order procedure Abstract: think about the pattern instead of the specifics.
Higher order procedure template (define (procedure-name formal-parameters) (if (end condition in terms of the arguments) finish do something with term and next  Higher order procedure sum template (define (sum term a next b) (if (&amp;gt; a b) 0 (+ (term a) (sum term (next a) next b))))  Anonymous procedure Procedure without a name (called lambda in Scheme).</description>
    </item>
    
    <item>
      <title>Building Abstractions With Procedures</title>
      <link>https://isaacverm.github.io/course-notes/building-abstractions-with-procedures/</link>
      <pubDate>Wed, 25 Sep 2019 21:48:04 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/course-notes/building-abstractions-with-procedures/</guid>
      <description>process  manipulates data directed by rules (program)  interpreter carries out processes
why study Lisp blurs distinction between procedures and data</description>
    </item>
    
    <item>
      <title>Elements of Programming</title>
      <link>https://isaacverm.github.io/course-notes/elements-of-programming/</link>
      <pubDate>Wed, 25 Sep 2019 21:40:27 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/course-notes/elements-of-programming/</guid>
      <description>elements in every language  primitive expressions combination abstraction  primitive expressions  most basic entities either  primitive procedures (e.g. +) primitive data (number)   combination build compound elements from simpler elements
abstraction compound elements can be named and manipulated as units
types of elements  procedures data  benefit prefix notation  arbitrary number of arguments nesting  repl read-evaluate-print-loop
define in scheme variables have values</description>
    </item>
    
  </channel>
</rss>