<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exercises on Blog Isaac Verminck</title>
    <link>https://isaacverm.github.io/exercises/</link>
    <description>Recent content in Exercises on Blog Isaac Verminck</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Sep 2019 20:43:53 +0200</lastBuildDate>
    
	<atom:link href="https://isaacverm.github.io/exercises/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exercise Newton Root</title>
      <link>https://isaacverm.github.io/exercises/structure-and-interpretation/exercise-newton-root/</link>
      <pubDate>Sun, 29 Sep 2019 20:43:53 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/exercises/structure-and-interpretation/exercise-newton-root/</guid>
      <description>Difference between declarative (what is) programming and imperative (how to) programming. You can define the root mathematically (declarative) but that doesn&amp;rsquo;t help in finding it (imperative).</description>
    </item>
    
    <item>
      <title>Exercise 1.5</title>
      <link>https://isaacverm.github.io/exercises/structure-and-interpretation/exercise-1.5/</link>
      <pubDate>Sun, 29 Sep 2019 20:25:54 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/exercises/structure-and-interpretation/exercise-1.5/</guid>
      <description>Explanation in blog post easier than the one the book.
Evaluation:
 normal order  expand and reduce all functions first then evaluate parameters lazy  applicative order  evaluate and apply function first then formal parameters loop eager   So why does the test work? p will never stop executing when evaluating since there&amp;rsquo;s no stopping condition. So if we use the evaluate and apply model from applicative order evaluation the first thing that will be done is evaluating the p procedure thus hanging the process.</description>
    </item>
    
    <item>
      <title>Exercise 1.4</title>
      <link>https://isaacverm.github.io/exercises/structure-and-interpretation/exercise-1.4/</link>
      <pubDate>Sun, 29 Sep 2019 20:19:15 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/exercises/structure-and-interpretation/exercise-1.4/</guid>
      <description>Always the same result except if b = 0 because &amp;ndash; = +.</description>
    </item>
    
    <item>
      <title>Exercise 1.3</title>
      <link>https://isaacverm.github.io/exercises/structure-and-interpretation/exercise-1.3/</link>
      <pubDate>Sat, 28 Sep 2019 19:31:21 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/exercises/structure-and-interpretation/exercise-1.3/</guid>
      <description>concepts used  procedure definition conditional expression  explanation concepts procedure definition Abstraction by which a compound operation can be given a name and then referred to as a unit.
General form:
(define (&amp;lt;name&amp;gt; &amp;lt;formal parameters&amp;gt;) &amp;lt;body&amp;gt;)   name (symbol to be associated with the procedure definition in the environment) formal parameters (names used within the body of the procedure to refer to the corresponding arguments of the procedure) body (expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied)  conditional expression Consists of clauses which are pairs of predicates and consequent expressions.</description>
    </item>
    
  </channel>
</rss>