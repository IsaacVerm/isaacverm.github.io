<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog Isaac Verminck</title>
    <link>https://isaacverm.github.io/posts/</link>
    <description>Recent content in Posts on Blog Isaac Verminck</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Nov 2019 09:36:05 +0100</lastBuildDate>
    
	<atom:link href="https://isaacverm.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Visualize average goals per game in Processing</title>
      <link>https://isaacverm.github.io/posts/visualize-average-goals-per-game/</link>
      <pubDate>Tue, 26 Nov 2019 09:36:05 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/visualize-average-goals-per-game/</guid>
      <description>In a previous analysis I made a graph showing the average number of home and away goals by season. For some time I&amp;rsquo;ve been playing around with Processing but only ever focused on small examples instead of a real project. Reproducing the original ggplot2 graph mentioned above seems like a good start. Nothing massive, still feasible.
Parts of the graph What exactly did the original plot look like?
We can discern these elements:</description>
    </item>
    
    <item>
      <title>Analysis scores Belgian soccer league</title>
      <link>https://isaacverm.github.io/posts/scores.jpl/</link>
      <pubDate>Mon, 18 Nov 2019 13:16:19 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/scores.jpl/</guid>
      <description>Analysis made on request. Wanted to explorer scores in the Belgian League. Was quite interesting how much interesting things you can do with a modicum of data. I just focused on the raw scores without linking them to teams or anything and already several, more or less interesting, questions came up naturally.
Code here, analysis itself hosted on RPubs.</description>
    </item>
    
    <item>
      <title>Possible rank changes next gameweek Jupiler Pro League</title>
      <link>https://isaacverm.github.io/posts/possible-rank-changes-jpl/</link>
      <pubDate>Thu, 14 Nov 2019 22:05:14 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/possible-rank-changes-jpl/</guid>
      <description>Made a post about possible rank changes for teams in the Jupiler Pro League. Felt inspired to try to replicate this post on r/dataisbeautiful. Integrating rmarkdown with Hugo didn&amp;rsquo;t seem straightforward so I decided to publish it to RPubs and link to it from here.
Code for this post can be found on GitHub . Used the package structure again as in the reproducible analysis series and found it very enjoyable.</description>
    </item>
    
    <item>
      <title>Reproducible analysis: literate programming</title>
      <link>https://isaacverm.github.io/posts/reproducible-analysis-literate-programming/</link>
      <pubDate>Tue, 12 Nov 2019 18:43:48 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/reproducible-analysis-literate-programming/</guid>
      <description>Issue When starting off as a beginner doing data analysis you often start with hacking together some scripts. You pick whatever you can find, throw it in the mix and let everything run. These scripts create output like plots, tables, &amp;hellip; which you manually copy afterwards into some document. There are several reasons why this is frankly an excruciating way of working:
 if some output changes you have to manually copy the changed results to the document where you write the analysis changing some parameters of your analysis requires rerunning everything the explanation of what your code does is totally decoupled from the code itself  All this doesn&amp;rsquo;t really favor reproducible analysis.</description>
    </item>
    
    <item>
      <title>Reproducible analysis: documentation</title>
      <link>https://isaacverm.github.io/posts/reproducible-analysis-documentation/</link>
      <pubDate>Tue, 12 Nov 2019 14:45:00 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/reproducible-analysis-documentation/</guid>
      <description>Issue We wrote the code, we wrote the tests but we didn&amp;rsquo;t specify explicitly how the code can be used. Take for example the calculateAutoCorrelation function. From its name we can infer it should return some kind of auto correlation coefficient. But how exactly is this correlation calculated? What kind of lag we take into account? Those questions can more easily be answered if we add some metadata to the functions we created.</description>
    </item>
    
    <item>
      <title>Reproducible analysis: testing</title>
      <link>https://isaacverm.github.io/posts/reproducible-analysis-testing/</link>
      <pubDate>Fri, 08 Nov 2019 10:45:16 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/reproducible-analysis-testing/</guid>
      <description>Issue When writing code we have some expectations about what it should do. We&amp;rsquo;d like it do something and, even better, do exactly what we want. Verifying this is harder than it seems. You can load a function, run it with some data and check manually if you like the results. However, this scales pretty badly as your code base grows. It becomes impossible to manually check all the details and accidents are bound to happen.</description>
    </item>
    
    <item>
      <title>Reproducible analysis: package development</title>
      <link>https://isaacverm.github.io/posts/reproducible-analysis-package-dev/</link>
      <pubDate>Sat, 02 Nov 2019 11:12:48 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/reproducible-analysis-package-dev/</guid>
      <description>Issue Packages are used to share your R code with others. Why then should this be the first topic tackled? Couldn&amp;rsquo;t we make our code shareable after we made something to actually share? Well, I actually don&amp;rsquo;t make the analysis a package mainly for sharing it (even though it&amp;rsquo;s nice to have). Packages also have the very nice side effect they enforce conventions. Other packages (e.g. testthat) build on these conventions.</description>
    </item>
    
    <item>
      <title>Reproducible analysis: example</title>
      <link>https://isaacverm.github.io/posts/reproducible-analysis-example/</link>
      <pubDate>Thu, 31 Oct 2019 15:20:58 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/reproducible-analysis-example/</guid>
      <description>Stating the obvious here, but before we can start playing around with the code we need code to play around with. As said in last post each step in the data analysis cycle will have its own function as an example.
Concerns about how to structure this code are not relevant at the moment. First things first so we throw all the functions together in a file called analysis.R. This file is also used to &amp;ldquo;orchestrate&amp;rdquo; (between quotation marks since orchestration in this case is just running each function after another).</description>
    </item>
    
    <item>
      <title>Reproducible analysis: outline</title>
      <link>https://isaacverm.github.io/posts/reproducible-analysis-outline/</link>
      <pubDate>Thu, 31 Oct 2019 11:31:43 +0100</pubDate>
      
      <guid>https://isaacverm.github.io/posts/reproducible-analysis-outline/</guid>
      <description>Motivation Last analysis post I made I hit quite a few stumbling blocks making the analysis take longer than expected. When reflecting on why this was the case I realized I hadn&amp;rsquo;t taken reproducibility into account. I made the post in the span of a week and already I realized parts were not documented well enough, not tested well enough, code versions weren&amp;rsquo;t tracked as they should, &amp;hellip; All this can be put under the banner of reproducibility.</description>
    </item>
    
    <item>
      <title>MPs commission attendances</title>
      <link>https://isaacverm.github.io/posts/mps-commission-attendances/</link>
      <pubDate>Sat, 26 Oct 2019 14:14:40 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/posts/mps-commission-attendances/</guid>
      <description>Scope of this post Article which inspired this post I was triggered to write this post because of an interesting article in De Tijd from some years ago which I recently stumbled upon again. Maarten Lambrechts investigated which members of the Flemish parliament are industrious and which are&amp;hellip; less so.
Focus on commission attendances To make this more concrete he looked at the number of initiatives and questions by parliamentarians in the Flemish Parliament.</description>
    </item>
    
    <item>
      <title>Cypress commands: selecting elements</title>
      <link>https://isaacverm.github.io/posts/cypress-selecting-elements/</link>
      <pubDate>Thu, 17 Oct 2019 09:38:59 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/posts/cypress-selecting-elements/</guid>
      <description>In this post and the following one I&amp;rsquo;ll go over the most basic Cypress commands which are:
 selecting elements act on these elements  Selections are discussed in this post, I keep the action part for the next post.
Examples are based on the Cypress kitchen sink example site(often slightly modified to make the point more clear in context of this post). This example app covers all existing Cypress commands.</description>
    </item>
    
    <item>
      <title>Creating a simple CLI with Click to learn Russian (part 1)</title>
      <link>https://isaacverm.github.io/posts/cli-russian/</link>
      <pubDate>Tue, 15 Oct 2019 13:53:14 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/posts/cli-russian/</guid>
      <description>Goal Unix philosophy In line with the Unix philosophy I wanted to build a small system which is as user-friendly as possible (even though I might be the only user). I chose a system which would help me with a personal goal namely learning Russian.
Learning Russian Recently I scraped example phrases for the most common Russian words. Based on Zipf&amp;rsquo;s law it makes sense to really focus on the most common words since the frequency of any word is inversely proportional to its rank in the frequency table.</description>
    </item>
    
    <item>
      <title>Most common data manipulations implemented in awk and dplyr</title>
      <link>https://isaacverm.github.io/posts/most-common-data-manipulations-dplyr-awk/</link>
      <pubDate>Fri, 04 Oct 2019 14:51:44 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/posts/most-common-data-manipulations-dplyr-awk/</guid>
      <description>Goal of this post We compare the most common data manipulations between dplyr and awk in terms of functionality.
As explained perfectly in the tidyverse article there are 5 types of common data manipulations:
 filter select mutate summarise arrange  I go over each of these manipulations and show using examples in dplyr and awk how to implement them.
Some aspects of these data manipulations are not covered in this article:</description>
    </item>
    
    <item>
      <title>Create simplest web page possible</title>
      <link>https://isaacverm.github.io/posts/create-simplest-web-page/</link>
      <pubDate>Sun, 08 Sep 2019 16:12:09 +0200</pubDate>
      
      <guid>https://isaacverm.github.io/posts/create-simplest-web-page/</guid>
      <description>Rationale Everyone comes in touch with the web every day. Opening a browser is as natural as waking up. Sadly enough, way less people know how the web really works. That&amp;rsquo;s a pity because once you know how it work possibilities are endless. You can start manipulating the web any way you want which is close to being a magician!
In this tutorial I&amp;rsquo;d like to show:
 web development isn&amp;rsquo;t hard to learn and learning it is fun while learning you are already creating something and creating is fun so you have already double fun and then you can share it sharing is also fun  So as you can see you&amp;rsquo;re set up for triple whammy of pleasure with this article.</description>
    </item>
    
  </channel>
</rss>